openapi: 3.0.3
info:
  title: Swagger
  description: Swagger
  version: '0.1'
servers:
  - url: 'https://test2023-backend-ivan-t.abztrainee.com/api/v1'
  - url: 'http://localhost/api/v1'

paths:
  /roles:
    get:
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      tags:
        - roles
      description: Get all roles
      responses:
        200:
          description: Users response
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Role'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /users:
    get:
      tags:
        - users
      description: Get all users
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
        - name: page
          in: query
          description: Number page for getting users
          style: form
          schema:
            type: integer
        - name: per_page
          in: query
          description: Size page for getting users
          style: form
          schema:
            type: integer
      responses:
        200:
          description: Users response
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Users'
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

    post:
      tags:
        - users
      description: Create new User (Register). After register go to POST /login for authorization
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NewUser'
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        201:
          description: Created success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /users/{user}:
    get:
      tags:
        - users
      description: Get one user
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
        - name: user
          in: path
          required: true
          description: Id this user
          schema:
            type: integer
      responses:
        200:
          description: One user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Not found response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

    patch:
      tags:
        - users
      description: Update user
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
        - name: user
          in: path
          required: true
          description: Id this user
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateUser'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        200:
          description: Updated success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        404:
          description: Not found response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

    delete:
      tags:
        - users
      description: Delete user
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
        - name: user
          in: path
          required: true
          description: Id this user
          schema:
            type: integer
      responses:
        204:
          description: Deleted success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
        404:
          description: Not found response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /login:
    post:
      tags:
        - auth
      description: "Get authorization link by email. The authorization link will be sent to the user's email in the form: 'https://<domain-name>/auth?hash={hash}' . After that, you need to call the method POST /login to authorize"
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        200:
          description: Login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              example:
                message: The email must be a valid email address
                errors:
                  email:
                    - "The email format is invalid."
        404:
          description: Not found email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              example:
                message: Not found email, please register
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /verify:
    post:
      tags:
        - auth
      description: "The AuthToken must be obtained from the method POST /verify by clicking on the link that will be sent to the mail"
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Verify'
          application/json:
            schema:
              $ref: '#/components/schemas/Verify'
      responses:
        200:
          description: Authorization success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAuth'
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/SuccessAuth'
        404:
          description: Not found hash
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              example:
                message: Not found hash
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              example:
                message: The token must be a valid
                errors:
                  hash:
                    - "The hash format is required."
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /logout:
    post:
      tags:
        - auth
      description: "Logout user"
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en

      responses:
        200:
          description: Authorization success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessLogout'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example:
                message: Unauthorized
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /social:
    post:
      tags:
        - social
      description: "This method will check if the user is registered in the system (through a social network) and will give a response depending on this. If the user is not registered, then you will need to go through the second step of registration to fill in all the required fields. When a user is registered, an authorization token and his data will be issued"
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Social'
          application/json:
            schema:
              $ref: '#/components/schemas/Social'
      responses:
        200:
          description: Authorization success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAuth'
        201:
          description: User created but not active, complete the two step of registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessFirstStepRegister'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example:
                message: The token expired
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
              example:
                message: "Forbidden. No access to the user's email in the social network"
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              example:
                message: The token must be a valid
                errors:
                  email:
                    - "The token field is required."
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /social/next:
    post:
      tags:
        - social
      description: Method for full register user by social network and get user data and LoginToken.
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TwoStepRegister'
          application/json:
            schema:
              $ref: '#/components/schemas/TwoStepRegister'
      responses:
        200:
          description: Authorization success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAuth'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              example:
                message: The hash not found
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              example:
                message: The token must be a valid
                errors:
                  email:
                    - "The token format is invalid."
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /orders:
    post:
      tags:
        - orders
      description: Method for creating an order before payment
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NewOrder'
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        201:
          description: Create order success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              example:
                message: The token must be a valid
                errors:
                  email:
                    - "The token format is invalid."
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'
    get:
      tags:
        - orders
      description: Method for getting users orders information
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      responses:
        200:
          description: Getting order success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /payment:
    post:
      tags:
        - payment
      description: Method for payment an order via Stripe or PayPal
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NewPayment'
          application/json:
            schema:
              $ref: '#/components/schemas/NewPayment'
      responses:
        200:
          description: Payment success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              example:
                message: The token must be a valid
                errors:
                  email:
                    - "The token format is invalid."
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /payment/refund:
    post:
      tags:
        - payment
      description: Method for charge refund
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NewRefund'
          application/json:
            schema:
              $ref: '#/components/schemas/NewRefund'
      responses:
        200:
          description: Refund success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              example:
                message: Not found order
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              example:
                message: The token must be a valid
                errors:
                  email:
                    - "The token format is invalid."
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /products:
    get:
      tags:
        - products
      description: Method to get all products
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
        - name: page
          in: query
          description: Number page for getting products
          style: form
          schema:
            type: integer
        - name: per_page
          in: query
          description: Size page for getting products
          style: form
          schema:
            type: integer
      responses:
        200:
          description: Products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /cards/{id}:
    delete:
      tags:
        - card
      description: This method deleting saved card.
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
        - name: id
          in: path
          required: true
          description: Card id
          schema:
            type: integer
      responses:
        204:
          description: Successfully deleted saved card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'

        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
              example:
                message: Not found card id
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              example:
                message: The token must be a valid
                errors:
                  email:
                    - "The token format is invalid."
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /cards:
    get:
      tags:
        - card
      description: This method for getting users saved card.
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      responses:
        200:
          description: Successfully getting saved card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCards'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

components:
  securitySchemes:
    AuthToken:
      type: http
      scheme: bearer

  schemas:
    #Social Driver properties
    SocialDriver:
      type: string
      description: Social network through which you register or log in
      enum:
        - google
        - facebook
      example: facebook

      # Auth Token properties
    AuthToken:
      type: string
      example: fhMg2cwiHUghKOGpWWD4BFZukjubZ7p5Aj2edOM0
      description: Social network token for login
      nullable: false

    # Hash properties
    LoginHash:
      type: string
      example: fhMg2cwiHUghKOGpWWD4BFZukjubZ7p5Aj2edOM0
      nullable: false
      description: Hash with query parameter in message with POST /login
    SocialHash:
      type: string
      example: fhMg2cwiHUghKOGpWWD4BFZukjubZ7p5Aj2edOM0
      nullable: false
      description: Hash for which will be an identifiable user in POST /two-step/social

    #  Users properties
    UserName:
      type: string
      example: Andrii
      nullable: false
      description: User name, may contain only lattice letters and symbols space, -
      minLength: 2
      maxLength: 60
    UserEmail:
      type: string
      example: example@gmail.com
      description: User email, must be a valid according to RFC
      nullable: false
      minLength: 6
      maxLength: 254
    UserPhone:
      type: string
      example: "+380730000000"
      description: User phone, must be a valid according to +380000000000 (Ukraine format)
      nullable: false
      minLength: 1
    UserImage:
      type: string
      format: binary
      description: User image, must be a jpg, jpeg format. Min height and min width must be a 70px, and size image smaller 5Mb
    UserImageResponse:
      type: string
      example: https://test2023-backend-ivan-t.abztrainee.com/storage/users/dzsfd32NJdpsdvDJcko9dssdc.jpg
      description: Link for user image. If image is small, file name -> dzsfd32NJdpsdvDJcko9dssdc_small.jpg
    UserId:
      type: integer
      example: 1
      description: User id
      minLength: 1
    StripeCutomerId:
      type: string
      example: 24jrdKPe43fk
      description: Stripe customer id
      minLength: 1

    # Role properties
    RoleId:
      type: integer
      example: 1
      description: Role id
      minLength: 1
    RoleTitle:
      type: string
      example: Developer
      description: Role id
      minLength: 1

    # Paginate properties
    CurrentPage:
      type: integer
      example: 1
    FirstPageUrl:
      type: string
      example: https://test2023-backend-ivan-t.abztrainee.com/api/V1/users?page=1&per_page=15
    LastPage:
      type: integer
      example: 4
    LastPageUrl:
      type: string
      example: https://test2023-backend-ivan-t.abztrainee.com/api/V1/users?page=1&per_page=15
    PerPage:
      type: integer
      example: 10
    Total:
      type: integer
      example: 15
    PrevLink:
      type: string
      example: https://test2023-backend-ivan-t.abztrainee.com/api/V1/users?page=1&per_page=15
    NextLink:
      type: string
      example: https://test2023-backend-ivan-t.abztrainee.com/api/V1/users?page=2&per_page=15

    # Order properties
    OrderId:
      type: integer
      example: 1
      description: Order id
      minLength: 1
    OrderPaymentId:
      type: string
      example: pi_1DsvVk2eZvKYlo2CPTkujDWC
      description: Unique identifier for the object PaymentIntent
      minLength: 1
    OrderClientSecret:
      type: string
      example: pi_1DsvVk2eZvKYlo2CPTkujDWC_secret_2UgUfLIr4eJehOFEAkxq59zCn
      description: Client secret key
      minLength: 1
    OrderPaymentMethod:
      type: string
      example: pm_card_visa
      description: ID of the payment method (a PaymentMethod, Card, or compatible Source object)
      minLength: 1
    OrderTypePayment:
      type: string
      $ref: '#/components/schemas/OrderTypePaymentEnum'

    # PaymentStatus properties
    PaymentStatusId:
      type: integer
      example: 1
      description: Status Payment id
      minLength: 1
    PaymentStatusCreatedAt:
      type: string
      example: 2022-12-12 12:30:33
      description: Status Payment created at

    # Product properties
    ProductId:
      type: integer
      example: 1
      description: Product id
      minLength: 1
    ProductUniqueNumber:
      type: string
      example: 20230802110922
      description: Unique number of Product
      minLength: 1
    ProductTitle:
      type: string
      example: White mug with a cat
      description: Product title
      minLength: 1
    ProductDescription:
      type: string
      example: Porcelain mug with a diameter of 10 cm is made of sturdy glass
      description: Product description
      minLength: 1
    ProductImg:
      type: string
      format: binary
      description: Product image, must be a jpg, jpeg format. Size image smaller 5Mb
    ProductImgOutput:
      type: string
      example: https://test2023-backend-ivan-t.abztrainee.com/storage/products/bhjdBJHViud9384bv2223mdnc.jpg
      description: Link to product image
    ProductQuantity:
      type: integer
      example: 100
      description: Quantity products
    ProductPrice:
      type: number
      multipleOf: 0.01
      example: 23.45
      description: Price product

    #OrderItems properties
    OrderItemId:
      type: integer
      example: 1
      description: Product id
      minLength: 1
    OrderItemTitle:
      type: string
      example: White mug with a cat
      description: Product title
      minLength: 1
    OrderItemDescription:
      type: string
      example: Porcelain mug with a diameter of 10 cm is made of sturdy glass
      description: Product description
      minLength: 1
    OrderItemImg:
      type: string
      format: binary
      description: Product image, must be a jpg, jpeg format. Size image smaller 5Mb
    OrderItemQuantity:
      type: integer
      example: 10
      description: The number of products you want to order
      maximum: 99
    OrderItemPrice:
      type: number
      multipleOf: 0.01
      example: 23
      description: Price product

    #Payment properties
    LabelSaveCard:
      type: boolean
      example: false
      description: Label for saving the card for a specific payment id

    #UserCard properties
    UserCardId:
      type: integer
      example: 1
      description: Id user card
    UserCardNumber:
      type: string
      example: 1234
      description: last for number card
    UserCardType:
      type: string
      example: visa
      description: Type card
    ChooseCardId:
      nullable: true
      example: 1
      type: integer
      description: Id of the selected saved card. Can be null when the card is not selected or there is no given functionality
    UserCardPaymentMethod:
      nullable: true
      type: string
      example: null
      description: Payment method choose card

    # Enums
    OrderTypePaymentEnum:
      nullable: false
      type: string
      enum:
        - stripe
        - paypal
      example: stripe
      description: Type of payment
    OrderStatusPaymentEnum:
      type: string
      enum:
        - refund
        - success
        - pending
        - failed
      example: success
      description: Status of payment

    # Refund  responses or requestBody
    NewRefund:
      properties:
        order_id:
          $ref: '#/components/schemas/PaymentStatusId'
        type_payment:
          $ref: '#/components/schemas/OrderTypePaymentEnum'
    Refund:
      properties:
        message:
          type: string
          example: 'Refund success'

    # PaymentStatus responses or requestBody
    PaymentStatuses:
      type: array
      items:
        properties:
          id:
            $ref: '#/components/schemas/PaymentStatusId'
          status:
            $ref: '#/components/schemas/OrderStatusPaymentEnum'
          created_at:
            $ref: '#/components/schemas/PaymentStatusCreatedAt'

    # OrderItem Responses and RequestBody
    OrderItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/OrderItemId'
        title:
          $ref: '#/components/schemas/OrderItemTitle'
        description:
          $ref: '#/components/schemas/OrderItemDescription'
        img:
          $ref: '#/components/schemas/OrderItemImg'
        quantity:
          $ref: '#/components/schemas/OrderItemQuantity'
        price:
          $ref: '#/components/schemas/OrderItemPrice'
        product_id:
          $ref: '#/components/schemas/ProductUniqueNumber'

    # UserCard Responses and RequestBody
    UserCard:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserCardId'
        last_number:
          $ref: '#/components/schemas/UserCardNumber'
        type_card:
          $ref: '#/components/schemas/UserCardType'
    UserCards:
      type: array
      items:
        $ref: '#/components/schemas/UserCard'

    # Payment Responses and RequestBody
    NewPayment:
      required:
        - type_payment
        - order_id
      type: object
      properties:
        order_id:
          $ref: '#/components/schemas/OrderId'
        type_payment:
          $ref: '#/components/schemas/OrderTypePayment'
        save_card:
          $ref: '#/components/schemas/LabelSaveCard'
        card_id:
          $ref: '#/components/schemas/UserCardId'

    Payment:
      type: object
      properties:
        type_payment:
          $ref: '#/components/schemas/OrderTypePayment'
        payment_id:
          $ref: '#/components/schemas/OrderPaymentId'
        client_secret:
          $ref: '#/components/schemas/OrderClientSecret'
        payment_method:
          $ref: '#/components/schemas/UserCardPaymentMethod'


    # Product Responses and RequestBody
    Product:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ProductId'
        product_id:
          $ref: '#/components/schemas/ProductUniqueNumber'
        title:
          $ref: '#/components/schemas/ProductTitle'
        description:
          $ref: '#/components/schemas/ProductDescription'
        img:
          $ref: '#/components/schemas/ProductImgOutput'
        quantity:
          $ref: '#/components/schemas/ProductQuantity'
        price:
          $ref: '#/components/schemas/ProductPrice'
    Products:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        meta:
          $ref: '#/components/schemas/Paginate'

    # Order Responses and RequestBody
    NewOrder:
      required:
        - id
        - quantity
        - products
      properties:
        products:
          type: array
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/ProductId'
              quantity:
                $ref: '#/components/schemas/OrderItemQuantity'

    Order:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/OrderId'
        statuses:
          $ref: '#/components/schemas/PaymentStatuses'
        products:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
    Orders:
      type: array
      items:
        $ref: '#/components/schemas/Order'


    # Users Responses and RequestBody
    Users:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        meta:
          $ref: '#/components/schemas/Paginate'
    User:
      required:
        - id
        - name
        - email
        - phone
        - photo_small
        - photo_big
        - role
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        name:
          $ref: '#/components/schemas/UserName'
        email:
          $ref: '#/components/schemas/UserEmail'
        phone:
          $ref: '#/components/schemas/UserPhone'
        photo_small:
          $ref: '#/components/schemas/UserImageResponse'
        photo_big:
          $ref: '#/components/schemas/UserImageResponse'
        role:
          $ref: '#/components/schemas/RoleTitle'
    NewUser:
      type: object
      required:
        - name
        - email
        - phone
        - photo
        - role_id
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        email:
          $ref: '#/components/schemas/UserEmail'
        phone:
          $ref: '#/components/schemas/UserPhone'
        photo:
          $ref: '#/components/schemas/UserImage'
        role_id:
          $ref: '#/components/schemas/RoleId'
    UpdateUser:
      type: object
      required:
        - name
        - email
        - phone
        - role_id
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        email:
          $ref: '#/components/schemas/UserEmail'
        phone:
          $ref: '#/components/schemas/UserPhone'
        photo:
          $ref: '#/components/schemas/UserImage'
        role_id:
          $ref: '#/components/schemas/RoleId'

    # Role Responses
    Role:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RoleId'
        title:
          $ref: '#/components/schemas/RoleTitle'

    # Paginate Response
    Paginate:
      required:
        - current_page
        - first_page_url
        - last_page
        - last_page_url
        - per_page
        - total
        - prev_link
        - next_link
      properties:
        current_page:
          $ref: '#/components/schemas/CurrentPage'
        first_page_url:
          $ref: '#/components/schemas/FirstPageUrl'
        last_page:
          $ref: '#/components/schemas/LastPage'
        last_page_url:
          $ref: '#/components/schemas/LastPageUrl'
        per_page:
          $ref: '#/components/schemas/PerPage'
        total:
          $ref: '#/components/schemas/Total'
        prev_link:
          $ref: '#/components/schemas/PrevLink'
        next_link:
          $ref: '#/components/schemas/NextLink'

    # Auth Responses an RequestBody
    SuccessLogout:
      type: object
      properties:
        message:
          type: string
          example: You successfully logged out
    Social:
      type: object
      required:
        - driver
        - token
      properties:
        token:
          $ref: '#/components/schemas/AuthToken'
        driver:
          $ref: '#/components/schemas/SocialDriver'

    SuccessFirstStepRegister:
      type: object
      properties:
        message:
          type: string
          example: You are successfully first-step register, go by two-step register
        hash:
          $ref: '#/components/schemas/SocialHash'
        data:
          type: object
          properties:
            id:
              $ref: '#/components/schemas/UserId'
            name:
              $ref: '#/components/schemas/UserName'
            email:
              $ref: '#/components/schemas/UserEmail'

    TwoStepRegister:
      type: object
      required:
        - name
        - phone
        - photo
        - role_id
        - hash
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        phone:
          $ref: '#/components/schemas/UserPhone'
        photo:
          $ref: '#/components/schemas/UserImage'
        role_id:
          $ref: '#/components/schemas/RoleId'
        hash:
          $ref: '#/components/schemas/SocialHash'

    SuccessAuth:
      type: object
      properties:
        message:
          type: string
          example: You are successfully logged in
        token:
          $ref: '#/components/schemas/AuthToken'
        data:
          type: object
          $ref: '#/components/schemas/User'

    LoginResponse:
      type: object
      properties:
        status:
          type: string
          example: Success
          description: status to send mail
        message:
          type: string
          example: A message with an authorization link was successfully sent to your email
    Login:
      type: object
      required:
        - email
      properties:
        email:
          $ref: '#/components/schemas/UserEmail'

    Verify:
      type: object
      required:
        - hash
      properties:
        hash:
          $ref: '#/components/schemas/LoginHash'

    # Errors
    NotFound:
      title: Not found
      type: object
      properties:
        message:
          type: string
          example: 'Not found'
    Unauthorized:
      title: Unauthorized
      type: object
      properties:
        message:
          type: string
          example: 'Unauthorized'
    Forbidden:
      title: Forbidden
      type: object
      properties:
        message:
          type: string
          example: Forbidden
    BadRequest:
      type: object
      title: Bad request
      properties:
        message:
          type: string
          example: 'The phone format is invalid.'
        errors:
          type: object
          properties:
            phone:
              type: array
              items:
                example: "The phone format is invalid."
    Conflict:
      type: object
      title: Conflict
      properties:
        message:
          type: string
          example: 'The email has already been taken.'
    Created:
      type: object
      title: Created
      properties:
        message:
          type: string
          example: 'Created success'
        status:
          type: integer
          example: 201
    Deleted:
      type: object
      title: Deleted
      properties:
        message:
          type: string
          example: 'Deleted success'
        status:
          type: integer
          example: 204
    SomethingWentWrong:
      type: object
      title: Something Went Wrong
      properties:
        message:
          type: string
          example: 'Something went wrong'

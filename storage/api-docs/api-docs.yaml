openapi: 3.0.3
info:
  title: Swagger
  description: Swagger
  version: '0.1'
servers:
  - url: 'https://test2023-backend-ivan-t.abztrainee.com/api/v1'
  - url: 'http://localhost/api/v1'
paths:
  /roles:
    get:
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      tags:
        - roles
      description: Get all roles
      responses:
        200:
          description: Users response
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Role'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /users:
    get:
      tags:
        - users
      description: Get all users
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
        - name: page
          in: query
          description: Number page for getting users
          style: form
          schema:
            type: integer
        - name: per_page
          in: query
          description: Size page for getting users
          style: form
          schema:
            type: integer
      responses:
        200:
          description: Users response
          content:
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/Users'
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

    post:
      tags:
        - users
      description: Create new User (Register). After register go to POST /login for authorization
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NewUser'
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        201:
          description: Created success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /users/{user}:
    get:
      tags:
        - users
      description: Get one user
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
        - name: user
          in: path
          required: true
          description: Id this user
          schema:
            type: integer
      responses:
        200:
          description: One user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Not found response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

    patch:
      tags:
        - users
      description: Update user
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
        - name: user
          in: path
          required: true
          description: Id this user
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateUser'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        200:
          description: Updated success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        404:
          description: Not found response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

    delete:
      tags:
        - users
      description: Delete user
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
        - name: user
          in: path
          required: true
          description: Id this user
          schema:
            type: integer
      responses:
        204:
          description: Deleted success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deleted'
        404:
          description: Not found response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /login:
    post:
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      tags:
        - login
      description: Login user
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        200:
          description: Users response
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/SuccessAuth'
  /logout:
    post:
      tags:
        - login
      description: "Logout user"
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en

      responses:
        200:
          description: Authorization success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessLogout'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example:
                message: Unauthorized
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'

  /social:
    post:
      tags:
        - social
      description: "This method will returned url for social auth"
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Social'
          application/json:
            schema:
              $ref: '#/components/schemas/Social'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialUrl'
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'
  /callback:
    get:
      tags:
        - social
      description: "This method will check if the user is registered in the system (through a social network) and will give a response depending on this. If the user is not registered, then you will need to go through the second step of registration to fill in all the required fields. When a user is registered, an authorization token and his data will be issued"
      parameters:
        - in: header
          name: Accept-Language
          description: Set interface language (en, de)
          schema:
            type: string
            example: en
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialCallback'
          application/json:
            schema:
              $ref: '#/components/schemas/SocialCallback'
      responses:
        200:
          description: Authorization success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAuth'
        201:
          description: User created but not active, complete the two step of registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessFirstStepRegister'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example:
                message: The token expired
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
              example:
                message: "Forbidden. No access to the user's email in the social network"
        422:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              example:
                message: The token must be a valid
                errors:
                  email:
                    - "The token field is required."
        503:
          description: Something Went Wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SomethingWentWrong'


components:
  securitySchemes:
    AuthToken:
      type: http
      scheme: bearer

  schemas:
    AccessToken:
      type: string
      example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzUxMiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0L2FwaS92MS9jYWxsYmFjayIsImlhdCI6MTY3NzQ5MDg0NCwiZXhwIjoxNjc3NDk0NDQ1LCJuYmYiOjE2Nzc0OTA4NDUsImp0aSI6IkpjbklmR3ZrVFVjUTA0bW4iLCJzdWIiOiI0NiIsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.O1qq_bVdUztBe8CTtkjjH4bLgUR11imiVZBN5tQLvAGurZJ7EeYQcms8TY2_XEW4DRrgI0EjUd6or7lkk34gmFanESLRqDeMTnzBpxZ8K0DwWEUU-RfniJDvmJt-QdgWueTTFG3myeEZmK1nphMxNd6mvpiPf6NTmc5n9AVQObgvcAwi0JVzyzgsTOPOtvrp1BQPpiaWQkK4qeibUL7NEmfp8fQhs5dwi3VH-G_Rj8XGVahunW7NiwCIpiWEOVxHshtvAFHalSI__YMxYg6aSStK_6RJl11IbPxbHK33BaOKzY0TQA95S4DH7wfoRyiTYclr3cpxJ8vPq9PUnpD_cHnAGHih44HXZ6XzJksGhKC6Z6bGBxtgsQSOuFNStSzIKfFb1PADSHKG5j8aX-DN4K6ghDNFonx8b0dD-NKUHUSVHen3f27ZRDIsewh5xpgxNoBlBXCas5iWLiBLCNFmXiFpxfBXz6OkL7ZOkEWd2b_Jg6XMUX-z-pRZFqGgf11v1HZcFiapIlfaU3BnMkyjbUGHI1EIkIeiyKCnb3uzklDK3A7E2Q308KZpT0n5Tfsa5KmYC5zQ36DPxXL20yDvtUkHqQASjg9LI692HASEWklHEanQGGEyY6_VhHSNxf-sEHtn-IY9f5UkbPpRsH4m_zIhq0ivQymDpOoIF6sbJ1Y'


    #  Users properties
    UserName:
      type: string
      example: John
      nullable: false
      description: User name, may contain only lattice letters and symbols space, -
      minLength: 2
      maxLength: 60
    UserEmail:
      type: string
      example: example@gmail.com
      description: User email, must be a valid according to RFC
      nullable: false
      minLength: 6
      maxLength: 254
    UserPhone:
      type: string
      example: "+380930400000"
      description: User phone, must be a valid according to +380000000000 (Ukraine format)
      nullable: false
      minLength: 1
    UserPhoto:
      type: string
      format: binary
      description: User image, must be a jpg, jpeg format. Min height and min width must be a 70px, and size image smaller 5Mb
    UserPhotoResponse:
      type: string
      example: https://test2023-backend-ivan-t.abztrainee.com/storage/users/dzsfd32NJdpsdvDJcko9dssdc.jpg
      description: Link for user image. If image is small, file name -> dzsfd32NJdpsdvDJcko9dssdc_small.jpg
    UserId:
      title: 'User'
      type: integer
      example: 1
      description: User id
      minLength: 1

    # Role properties
    RoleId:
      type: integer
      example: 1
      description: Role id
      minLength: 1
    RoleTitle:
      type: string
      example: Developer
      description: Role title
      minLength: 1

    #links properties
    LinksFirst:
      type: string
      example: https://test2023-backend-ivan-t.abztrainee.com/api/V1/users?page=1
    LinksLast:
      type: string
      example: https://test2023-backend-ivan-t.abztrainee.com/api/V1/users?page=3
    LinksPrev:
      type: string
      example: https://test2023-backend-ivan-t.abztrainee.com/api/V1/users?page=1
    LinksNext:
      type: string
      example: https://test2023-backend-ivan-t.abztrainee.com/api/V1/users?page=2

    # Paginate properties
    CurrentPage:
      type: integer
      example: 1
    From:
      type: integer
      example: 1
    LastPage:
      type: integer
      example: 4
    MetaLinks:
      type: array
      example:
        - url: https://test2023-backend-ivan-t.abztrainee.com/api/V1/users?page=1
          label: '1'
          active: false
        - url: https://test2023-backend-ivan-t.abztrainee.com/api/V1/users?page=2
          label: '2'
          active: true
        - url: https://test2023-backend-ivan-t.abztrainee.com/api/V1/users?page=3
          label: '3'
          active: true
    Path:
      type: string
      example: https://test2023-backend-ivan-t.abztrainee.com/api/V1/users
    PerPage:
      type: integer
      example: 15
    Total:
      type: integer
      example: 45
    To:
      type: integer
      example: 15

    # Users Responses and RequestBody
    Users:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Links'
        meta:
          $ref: '#/components/schemas/Paginate'
    User:
      required:
        - id
        - name
        - email
        - phone
        - photo_small
        - photo_big
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        name:
          $ref: '#/components/schemas/UserName'
        email:
          $ref: '#/components/schemas/UserEmail'
        phone:
          $ref: '#/components/schemas/UserPhone'
        photo_small:
          $ref: '#/components/schemas/UserPhotoResponse'
        photo_big:
          $ref: '#/components/schemas/UserPhotoResponse'
        role:
          $ref: '#/components/schemas/RoleTitle'
    NewUser:
      type: object
      required:
        - name
        - email
        - phone
        - photo
        - role_id
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        email:
          $ref: '#/components/schemas/UserEmail'
        phone:
          $ref: '#/components/schemas/UserPhone'
        photo:
          $ref: '#/components/schemas/UserPhoto'
        role_id:
          $ref: '#/components/schemas/RoleId'
    UpdateUser:
      type: object
      required:
        - name
        - email
        - phone
        - role_id
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        email:
          $ref: '#/components/schemas/UserEmail'
        phone:
          $ref: '#/components/schemas/UserPhone'
        photo:
          $ref: '#/components/schemas/UserPhoto'
        role_id:
          $ref: '#/components/schemas/RoleId'

    # Role Responses
    Roles:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Role:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RoleId'
        title:
          $ref: '#/components/schemas/RoleTitle'

    Links:
      type: object
      properties:
        first:
          $ref: '#/components/schemas/LinksFirst'
        last:
          $ref: '#/components/schemas/LinksLast'
        prev:
          $ref: '#/components/schemas/LinksPrev'
        next:
          $ref: '#/components/schemas/LinksNext'

    # Paginate Response
    Paginate:
      required:
        - current_page
        - from
        - last_page
        - links
        - path
        - per_page
        - to
        - total
      properties:
        current_page:
          $ref: '#/components/schemas/CurrentPage'
        from:
          $ref: '#/components/schemas/From'
        last_page:
          $ref: '#/components/schemas/LastPage'
        links:
          $ref: '#/components/schemas/MetaLinks'
        path:
          $ref: '#/components/schemas/Path'
        per_page:
          $ref: '#/components/schemas/PerPage'
        to:
          $ref: '#/components/schemas/To'
        total:
          $ref: '#/components/schemas/Total'

    Login:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/UserEmail'
        token:
          $ref: '#/components/schemas/LoginHash'

    SuccessLogout:
      type: object
      properties:
        message:
          type: string
          example: You successfully logged out

    LoginHash:
      type: string
      example: rBe4c5c9NbcWSwf59AdqNrG9sqBD6WsY
      description: Required if email address is not filled. A token with a request parameter in a message with POST /login
    SocialCallback:
      type: object
      required:
        - driver
        - token
      properties:
        token:
          $ref: '#/components/schemas/AuthToken'
        driver:
          $ref: '#/components/schemas/SocialDriver'

    SocialHash:
      type: string
      example: fhMg2cwiHUghKOGpWWD4BFZukjubZ7p5Aj2edOM0
      nullable: false
      description: Hash for which will be an identifiable user in POST /two-step/social

    Social:
      type: object
      required:
        - driver
      properties:
        driver:
          $ref: '#/components/schemas/SocialDriver'

    SocialUrl:
      type: object
      properties:
        url:
          $ref: '#/components/schemas/SocialRedirectUrl'

    SuccessFirstStepRegister:
      type: object
      properties:
        message:
          type: string
          example: You are successfully first-step register, go by two-step register
        hash:
          $ref: '#/components/schemas/SocialHash'
        data:
          type: object
          properties:
            id:
              $ref: '#/components/schemas/UserId'
            name:
              $ref: '#/components/schemas/UserName'
            email:
              $ref: '#/components/schemas/UserEmail'

    TwoStepRegister:
      type: object
      required:
        - name
        - phone
        - photo
        - role_id
        - hash
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        phone:
          $ref: '#/components/schemas/UserPhone'
        photo:
          $ref: '#/components/schemas/UserPhoto'
        role_id:
          $ref: '#/components/schemas/RoleId'
        hash:
          $ref: '#/components/schemas/SocialHash'

    SocialRedirectUrl:
      type: string
      description: Social network auth url
      example: 'https://www.facebook.com/v3.3/dialog/oauth?client_id=763927244779654&redirect_uri=http%3A%2F%2Flocalhost%2Fv1%2Ffacebook%2Fcallback&scope=email&response_type=code'

    #Social Driver properties
    SocialDriver:
      type: string
      description: Social network through which you register or log in
      enum:
        - google
        - facebook
      example: facebook

      # Auth Token properties
    AuthToken:
      type: string
      example: fhMg2cwiHUghKOGpWWD4BFZukjubZ7p5Aj2edOM0
      description: Social network token for login
      nullable: false

    SuccessAuth:
      type: object
      properties:
        data:
          type: object
          $ref: '#/components/schemas/User'
        access_token:
          $ref: '#/components/schemas/AccessToken'
        token_type:
          type: string
          example: 'bearer'
        expires_in:
          type: integer
          example: 3600


    # Errors
    NotFound:
      title: Not found
      type: object
      properties:
        message:
          type: string
          example: 'Not found'
    Unauthorized:
      title: Unauthorized
      type: object
      properties:
        message:
          type: string
          example: 'Unauthorized'
    Forbidden:
      title: Forbidden
      type: object
      properties:
        message:
          type: string
          example: Forbidden
    BadRequest:
      type: object
      title: Bad request
      properties:
        message:
          type: string
          example: 'The phone format is invalid.'
        errors:
          type: object
          properties:
            phone:
              type: array
              items:
                example: "The phone format is invalid."
    Conflict:
      type: object
      title: Conflict
      properties:
        message:
          type: string
          example: 'The email has already been taken.'
    Created:
      type: object
      title: Created
      properties:
        message:
          type: string
          example: 'Created success'
        status:
          type: integer
          example: 201
    Deleted:
      type: object
      title: Deleted
      properties:
        message:
          type: string
          example: 'Deleted success'
        status:
          type: integer
          example: 204
    SomethingWentWrong:
      type: object
      title: Something Went Wrong
      properties:
        message:
          type: string
          example: 'Something went wrong'
